<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
    <script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
    <script src="https://cdn.socket.io/socket.io-3.0.1.min.js"></script>
    <title>IOT Project</title>
</head>
<body class="background">

<style>

.vertical-center-container {
    position: relative;
    text-align: center;
    /* top: 20vh; */
}

.vertical-center {
    margin: 0 auto;
    display: inline-block;
    width: 600px;

}

@keyframes backgroundSlide {
    0%{background-position:0px 0px}
    100%{background-position:600px 600px}
}

.background{
    background-image: url("https://i.pinimg.com/originals/1c/38/2c/1c382cff6a0a1b9b7eabfd27a23ed99d.jpg");
    background-color: black;
    /* animation: backgroundSlide 20s infinite linear, colourshift 2s infinite ease; */
    animation: backgroundSlide 10s infinite linear;
}

.textWindow{
    background-color: white;
    padding: 10px;
    border-style: solid;
    border-width: 3px;
    border-radius: 5px;
}

</style>

<div class="vertical-center-container">
    <div class="vertical-center textWindow">
        <fieldset>
            <legend>IOT Project</legend>
            <table>
                <tr>
                    <td>Current Temperature:</td><td><input type="text" name="temperature" id="temperature"></td>
                </tr>
                <tr>
                    <td>X:</td><td><input type="text" name="x" id="x"></td>
                </tr>
                <tr>
                    <td>Y:</td><td><input type="text" name="y" id="y"></td>
                </tr>
                <tr>
                    <td>Z:</td><td><input type="text" name="z" id="z"></td>
                </tr>
            </table>
        </fieldset>
        <div id="tempContainer" style="height: 270px; width:100%;"></div>
        <div id="xContainer" style="height: 270px; width:100%;"></div>
        <div id="yContainer" style="height: 270px; width:100%;"></div>
        <div id="zContainer" style="height: 270px; width:100%;"></div>
    </div>
    
</div>

</body>

<script>

    // dataPoint arrays for each graph
    var tempdps = [];
    var xdps = [];
    var ydps = [];
    var zdps = [];


    var xVal = 0;
    var dataLength = 20; // number of dataPoints visible at any point

    // function for updating a chart
    var updateChart = function (container_id, title, datapoints, data) {

        // Add another point to the list of datapoints
        datapoints.push({
            x: xVal,
            y: data
        });

        // Prevent the chart from becoming too dense
        if (datapoints.length > dataLength) {
            datapoints.shift();
        }

        // This is probably not the most efficient way of doing this
        // This creates a new chart object each time this is run, which is rather wasteful
        // But the code is much shorter this way
        new CanvasJS.Chart(container_id, {
            title :{
                text: title
            },
            data: [{
                type: "line",
                dataPoints: datapoints
            }]
        }).render();
    };

    // setInterval(function(){updateChart()}, updateInterval);

    // Set the domain that this is going to be communicating with
    const socket = io('http://raspberrypi.local:3000');

    // Wait for data to be emitted to the 'message' socket
    socket.on('message', (data) => {
        console.log(JSON.stringify(data))
        
        // Display each thing in it's respective place
        document.getElementById('temperature').value = `${data.tmp}`
        document.getElementById('x').value = `${data.x}`
        document.getElementById('y').value = `${data.y}`
        document.getElementById('z').value = `${data.z}`

        // Update the graph with the new data
        updateChart("tempContainer", "Temperature (C)", tempdps, Number(data.tmp));
        updateChart("xContainer", "X", xdps, Number(data.x));
        updateChart("yContainer", "Y", ydps, Number(data.y));
        updateChart("zContainer", "Z", zdps, Number(data.z));

        // Increment the X-axis counter for all 4 charts
        // It can be reused for each chart, since they all update at the same time
        xVal++;
        
    });

</script>

</html>